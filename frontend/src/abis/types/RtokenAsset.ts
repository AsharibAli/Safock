/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TradingRangeStruct = {
    minVal: BigNumberish;
    maxVal: BigNumberish;
    minAmt: BigNumberish;
    maxAmt: BigNumberish;
};

export type TradingRangeStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    minVal: BigNumber;
    maxVal: BigNumber;
    minAmt: BigNumber;
    maxAmt: BigNumber;
};

export interface RtokenAssetInterface extends utils.Interface {
    functions: {
        "bal(address)": FunctionFragment;
        "chainlinkFeed()": FunctionFragment;
        "erc20()": FunctionFragment;
        "getClaimCalldata()": FunctionFragment;
        "isCollateral()": FunctionFragment;
        "maxTradeSize()": FunctionFragment;
        "minTradeSize()": FunctionFragment;
        "oracleTimeout()": FunctionFragment;
        "price()": FunctionFragment;
        "rewardERC20()": FunctionFragment;
        "tradingRange()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "bal"
            | "chainlinkFeed"
            | "erc20"
            | "getClaimCalldata"
            | "isCollateral"
            | "maxTradeSize"
            | "minTradeSize"
            | "oracleTimeout"
            | "price"
            | "rewardERC20"
            | "tradingRange"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "bal", values: [string]): string;
    encodeFunctionData(functionFragment: "chainlinkFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
    encodeFunctionData(functionFragment: "getClaimCalldata", values?: undefined): string;
    encodeFunctionData(functionFragment: "isCollateral", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxTradeSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "minTradeSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "oracleTimeout", values?: undefined): string;
    encodeFunctionData(functionFragment: "price", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardERC20", values?: undefined): string;
    encodeFunctionData(functionFragment: "tradingRange", values?: undefined): string;

    decodeFunctionResult(functionFragment: "bal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "chainlinkFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getClaimCalldata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxTradeSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minTradeSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oracleTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradingRange", data: BytesLike): Result;

    events: {};
}

export interface RtokenAsset extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: RtokenAssetInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        bal(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        chainlinkFeed(overrides?: CallOverrides): Promise<[string]>;

        erc20(overrides?: CallOverrides): Promise<[string]>;

        getClaimCalldata(
            overrides?: CallOverrides
        ): Promise<[string, string] & { _to: string; _cd: string }>;

        isCollateral(overrides?: CallOverrides): Promise<[boolean]>;

        maxTradeSize(overrides?: CallOverrides): Promise<[BigNumber] & { max: BigNumber }>;

        minTradeSize(overrides?: CallOverrides): Promise<[BigNumber] & { min: BigNumber }>;

        oracleTimeout(overrides?: CallOverrides): Promise<[number]>;

        price(overrides?: CallOverrides): Promise<[BigNumber] & { p: BigNumber }>;

        rewardERC20(overrides?: CallOverrides): Promise<[string]>;

        tradingRange(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                minVal: BigNumber;
                maxVal: BigNumber;
                minAmt: BigNumber;
                maxAmt: BigNumber;
            }
        >;
    };

    bal(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkFeed(overrides?: CallOverrides): Promise<string>;

    erc20(overrides?: CallOverrides): Promise<string>;

    getClaimCalldata(
        overrides?: CallOverrides
    ): Promise<[string, string] & { _to: string; _cd: string }>;

    isCollateral(overrides?: CallOverrides): Promise<boolean>;

    maxTradeSize(overrides?: CallOverrides): Promise<BigNumber>;

    minTradeSize(overrides?: CallOverrides): Promise<BigNumber>;

    oracleTimeout(overrides?: CallOverrides): Promise<number>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    rewardERC20(overrides?: CallOverrides): Promise<string>;

    tradingRange(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
            minVal: BigNumber;
            maxVal: BigNumber;
            minAmt: BigNumber;
            maxAmt: BigNumber;
        }
    >;

    callStatic: {
        bal(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        chainlinkFeed(overrides?: CallOverrides): Promise<string>;

        erc20(overrides?: CallOverrides): Promise<string>;

        getClaimCalldata(
            overrides?: CallOverrides
        ): Promise<[string, string] & { _to: string; _cd: string }>;

        isCollateral(overrides?: CallOverrides): Promise<boolean>;

        maxTradeSize(overrides?: CallOverrides): Promise<BigNumber>;

        minTradeSize(overrides?: CallOverrides): Promise<BigNumber>;

        oracleTimeout(overrides?: CallOverrides): Promise<number>;

        price(overrides?: CallOverrides): Promise<BigNumber>;

        rewardERC20(overrides?: CallOverrides): Promise<string>;

        tradingRange(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                minVal: BigNumber;
                maxVal: BigNumber;
                minAmt: BigNumber;
                maxAmt: BigNumber;
            }
        >;
    };

    filters: {};

    estimateGas: {
        bal(account: string, overrides?: CallOverrides): Promise<BigNumber>;

        chainlinkFeed(overrides?: CallOverrides): Promise<BigNumber>;

        erc20(overrides?: CallOverrides): Promise<BigNumber>;

        getClaimCalldata(overrides?: CallOverrides): Promise<BigNumber>;

        isCollateral(overrides?: CallOverrides): Promise<BigNumber>;

        maxTradeSize(overrides?: CallOverrides): Promise<BigNumber>;

        minTradeSize(overrides?: CallOverrides): Promise<BigNumber>;

        oracleTimeout(overrides?: CallOverrides): Promise<BigNumber>;

        price(overrides?: CallOverrides): Promise<BigNumber>;

        rewardERC20(overrides?: CallOverrides): Promise<BigNumber>;

        tradingRange(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        bal(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        chainlinkFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getClaimCalldata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maxTradeSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        minTradeSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        oracleTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        rewardERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tradingRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
