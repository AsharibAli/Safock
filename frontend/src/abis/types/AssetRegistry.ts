/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export interface AssetRegistryInterface extends utils.Interface {
    functions: {
        "erc20s()": FunctionFragment;
        "init(address,address[])": FunctionFragment;
        "isRegistered(address)": FunctionFragment;
        "main()": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "refresh()": FunctionFragment;
        "register(address)": FunctionFragment;
        "swapRegistered(address)": FunctionFragment;
        "toAsset(address)": FunctionFragment;
        "toColl(address)": FunctionFragment;
        "unregister(address)": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "erc20s"
            | "init"
            | "isRegistered"
            | "main"
            | "proxiableUUID"
            | "refresh"
            | "register"
            | "swapRegistered"
            | "toAsset"
            | "toColl"
            | "unregister"
            | "upgradeTo"
            | "upgradeToAndCall"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "erc20s", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "init",
        values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
    ): string;
    encodeFunctionData(functionFragment: "isRegistered", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "main", values?: undefined): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "refresh", values?: undefined): string;
    encodeFunctionData(functionFragment: "register", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "swapRegistered",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "toAsset", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "toColl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "unregister", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "upgradeToAndCall",
        values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string;

    decodeFunctionResult(functionFragment: "erc20s", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegistered", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "main", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "refresh", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapRegistered", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toColl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unregister", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;

    events: {
        "AdminChanged(address,address)": EventFragment;
        "AssetRegistered(address,address)": EventFragment;
        "AssetUnregistered(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "Upgraded(address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AssetRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AssetUnregistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
    previousAdmin: string;
    newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AssetRegisteredEventObject {
    erc20: string;
    asset: string;
}
export type AssetRegisteredEvent = TypedEvent<[string, string], AssetRegisteredEventObject>;

export type AssetRegisteredEventFilter = TypedEventFilter<AssetRegisteredEvent>;

export interface AssetUnregisteredEventObject {
    erc20: string;
    asset: string;
}
export type AssetUnregisteredEvent = TypedEvent<[string, string], AssetUnregisteredEventObject>;

export type AssetUnregisteredEventFilter = TypedEventFilter<AssetUnregisteredEvent>;

export interface BeaconUpgradedEventObject {
    beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpgradedEventObject {
    implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AssetRegistry extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: AssetRegistryInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        erc20s(overrides?: CallOverrides): Promise<[string[]] & { erc20s_: string[] }>;

        init(
            main_: PromiseOrValue<string>,
            assets_: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        isRegistered(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

        main(overrides?: CallOverrides): Promise<[string]>;

        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

        refresh(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        register(
            asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        swapRegistered(
            asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        toAsset(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

        toColl(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

        unregister(
            asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        upgradeTo(
            newImplementation: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        upgradeToAndCall(
            newImplementation: PromiseOrValue<string>,
            data: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };

    erc20s(overrides?: CallOverrides): Promise<string[]>;

    init(
        main_: PromiseOrValue<string>,
        assets_: PromiseOrValue<string>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRegistered(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    main(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    refresh(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    register(
        asset: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapRegistered(
        asset: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toAsset(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    toColl(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    unregister(
        asset: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
        newImplementation: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
        newImplementation: PromiseOrValue<string>,
        data: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        erc20s(overrides?: CallOverrides): Promise<string[]>;

        init(
            main_: PromiseOrValue<string>,
            assets_: PromiseOrValue<string>[],
            overrides?: CallOverrides
        ): Promise<void>;

        isRegistered(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

        main(overrides?: CallOverrides): Promise<string>;

        proxiableUUID(overrides?: CallOverrides): Promise<string>;

        refresh(overrides?: CallOverrides): Promise<void>;

        register(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

        swapRegistered(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

        toAsset(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

        toColl(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

        unregister(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        upgradeTo(
            newImplementation: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        upgradeToAndCall(
            newImplementation: PromiseOrValue<string>,
            data: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        "AdminChanged(address,address)"(
            previousAdmin?: null,
            newAdmin?: null
        ): AdminChangedEventFilter;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

        "AssetRegistered(address,address)"(
            erc20?: PromiseOrValue<string> | null,
            asset?: PromiseOrValue<string> | null
        ): AssetRegisteredEventFilter;
        AssetRegistered(
            erc20?: PromiseOrValue<string> | null,
            asset?: PromiseOrValue<string> | null
        ): AssetRegisteredEventFilter;

        "AssetUnregistered(address,address)"(
            erc20?: PromiseOrValue<string> | null,
            asset?: PromiseOrValue<string> | null
        ): AssetUnregisteredEventFilter;
        AssetUnregistered(
            erc20?: PromiseOrValue<string> | null,
            asset?: PromiseOrValue<string> | null
        ): AssetUnregisteredEventFilter;

        "BeaconUpgraded(address)"(
            beacon?: PromiseOrValue<string> | null
        ): BeaconUpgradedEventFilter;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;

        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    };

    estimateGas: {
        erc20s(overrides?: CallOverrides): Promise<BigNumber>;

        init(
            main_: PromiseOrValue<string>,
            assets_: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        isRegistered(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        main(overrides?: CallOverrides): Promise<BigNumber>;

        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

        refresh(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        register(
            asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        swapRegistered(
            asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        toAsset(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        toColl(erc20: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        unregister(
            asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        upgradeTo(
            newImplementation: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        upgradeToAndCall(
            newImplementation: PromiseOrValue<string>,
            data: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        erc20s(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        init(
            main_: PromiseOrValue<string>,
            assets_: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        isRegistered(
            erc20: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        main(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        refresh(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        register(
            asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        swapRegistered(
            asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        toAsset(
            erc20: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        toColl(
            erc20: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        unregister(
            asset: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        upgradeTo(
            newImplementation: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        upgradeToAndCall(
            newImplementation: PromiseOrValue<string>,
            data: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };
}
