/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export interface CollateralInterface extends utils.Interface {
    functions: {
        "bal(address)": FunctionFragment;
        "chainlinkFeed()": FunctionFragment;
        "delayUntilDefault()": FunctionFragment;
        "erc20()": FunctionFragment;
        "erc20Decimals()": FunctionFragment;
        "fallbackPrice()": FunctionFragment;
        "getClaimCalldata()": FunctionFragment;
        "isCollateral()": FunctionFragment;
        "maxTradeVolume()": FunctionFragment;
        "oracleTimeout()": FunctionFragment;
        "price(bool)": FunctionFragment;
        "pricePerTarget()": FunctionFragment;
        "refPerTok()": FunctionFragment;
        "refresh()": FunctionFragment;
        "rewardERC20()": FunctionFragment;
        "status()": FunctionFragment;
        "strictPrice()": FunctionFragment;
        "targetName()": FunctionFragment;
        "targetPerRef()": FunctionFragment;
        "whenDefault()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "bal"
            | "chainlinkFeed"
            | "delayUntilDefault"
            | "erc20"
            | "erc20Decimals"
            | "fallbackPrice"
            | "getClaimCalldata"
            | "isCollateral"
            | "maxTradeVolume"
            | "oracleTimeout"
            | "price"
            | "pricePerTarget"
            | "refPerTok"
            | "refresh"
            | "rewardERC20"
            | "status"
            | "strictPrice"
            | "targetName"
            | "targetPerRef"
            | "whenDefault"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "bal", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "chainlinkFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "delayUntilDefault", values?: undefined): string;
    encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
    encodeFunctionData(functionFragment: "erc20Decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "fallbackPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "getClaimCalldata", values?: undefined): string;
    encodeFunctionData(functionFragment: "isCollateral", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxTradeVolume", values?: undefined): string;
    encodeFunctionData(functionFragment: "oracleTimeout", values?: undefined): string;
    encodeFunctionData(functionFragment: "price", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "pricePerTarget", values?: undefined): string;
    encodeFunctionData(functionFragment: "refPerTok", values?: undefined): string;
    encodeFunctionData(functionFragment: "refresh", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardERC20", values?: undefined): string;
    encodeFunctionData(functionFragment: "status", values?: undefined): string;
    encodeFunctionData(functionFragment: "strictPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetName", values?: undefined): string;
    encodeFunctionData(functionFragment: "targetPerRef", values?: undefined): string;
    encodeFunctionData(functionFragment: "whenDefault", values?: undefined): string;

    decodeFunctionResult(functionFragment: "bal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "chainlinkFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delayUntilDefault", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "erc20Decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fallbackPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getClaimCalldata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxTradeVolume", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oracleTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pricePerTarget", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "refPerTok", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "refresh", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "strictPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetName", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "targetPerRef", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whenDefault", data: BytesLike): Result;

    events: {
        "DefaultStatusChanged(uint8,uint8)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "DefaultStatusChanged"): EventFragment;
}

export interface DefaultStatusChangedEventObject {
    oldStatus: number;
    newStatus: number;
}
export type DefaultStatusChangedEvent = TypedEvent<
    [number, number],
    DefaultStatusChangedEventObject
>;

export type DefaultStatusChangedEventFilter = TypedEventFilter<DefaultStatusChangedEvent>;

export interface Collateral extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: CollateralInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        bal(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        chainlinkFeed(overrides?: CallOverrides): Promise<[string]>;

        delayUntilDefault(overrides?: CallOverrides): Promise<[BigNumber]>;

        erc20(overrides?: CallOverrides): Promise<[string]>;

        erc20Decimals(overrides?: CallOverrides): Promise<[number]>;

        fallbackPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

        getClaimCalldata(
            overrides?: CallOverrides
        ): Promise<[string, string] & { _to: string; _cd: string }>;

        isCollateral(overrides?: CallOverrides): Promise<[boolean]>;

        maxTradeVolume(overrides?: CallOverrides): Promise<[BigNumber]>;

        oracleTimeout(overrides?: CallOverrides): Promise<[number]>;

        price(
            allowFallback: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[boolean, BigNumber] & { isFallback: boolean }>;

        pricePerTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

        refPerTok(overrides?: CallOverrides): Promise<[BigNumber]>;

        refresh(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        rewardERC20(overrides?: CallOverrides): Promise<[string]>;

        status(overrides?: CallOverrides): Promise<[number]>;

        strictPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

        targetName(overrides?: CallOverrides): Promise<[string]>;

        targetPerRef(overrides?: CallOverrides): Promise<[BigNumber]>;

        whenDefault(overrides?: CallOverrides): Promise<[BigNumber]>;
    };

    bal(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkFeed(overrides?: CallOverrides): Promise<string>;

    delayUntilDefault(overrides?: CallOverrides): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<string>;

    erc20Decimals(overrides?: CallOverrides): Promise<number>;

    fallbackPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimCalldata(
        overrides?: CallOverrides
    ): Promise<[string, string] & { _to: string; _cd: string }>;

    isCollateral(overrides?: CallOverrides): Promise<boolean>;

    maxTradeVolume(overrides?: CallOverrides): Promise<BigNumber>;

    oracleTimeout(overrides?: CallOverrides): Promise<number>;

    price(
        allowFallback: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { isFallback: boolean }>;

    pricePerTarget(overrides?: CallOverrides): Promise<BigNumber>;

    refPerTok(overrides?: CallOverrides): Promise<BigNumber>;

    refresh(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardERC20(overrides?: CallOverrides): Promise<string>;

    status(overrides?: CallOverrides): Promise<number>;

    strictPrice(overrides?: CallOverrides): Promise<BigNumber>;

    targetName(overrides?: CallOverrides): Promise<string>;

    targetPerRef(overrides?: CallOverrides): Promise<BigNumber>;

    whenDefault(overrides?: CallOverrides): Promise<BigNumber>;

    callStatic: {
        bal(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        chainlinkFeed(overrides?: CallOverrides): Promise<string>;

        delayUntilDefault(overrides?: CallOverrides): Promise<BigNumber>;

        erc20(overrides?: CallOverrides): Promise<string>;

        erc20Decimals(overrides?: CallOverrides): Promise<number>;

        fallbackPrice(overrides?: CallOverrides): Promise<BigNumber>;

        getClaimCalldata(
            overrides?: CallOverrides
        ): Promise<[string, string] & { _to: string; _cd: string }>;

        isCollateral(overrides?: CallOverrides): Promise<boolean>;

        maxTradeVolume(overrides?: CallOverrides): Promise<BigNumber>;

        oracleTimeout(overrides?: CallOverrides): Promise<number>;

        price(
            allowFallback: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[boolean, BigNumber] & { isFallback: boolean }>;

        pricePerTarget(overrides?: CallOverrides): Promise<BigNumber>;

        refPerTok(overrides?: CallOverrides): Promise<BigNumber>;

        refresh(overrides?: CallOverrides): Promise<void>;

        rewardERC20(overrides?: CallOverrides): Promise<string>;

        status(overrides?: CallOverrides): Promise<number>;

        strictPrice(overrides?: CallOverrides): Promise<BigNumber>;

        targetName(overrides?: CallOverrides): Promise<string>;

        targetPerRef(overrides?: CallOverrides): Promise<BigNumber>;

        whenDefault(overrides?: CallOverrides): Promise<BigNumber>;
    };

    filters: {
        "DefaultStatusChanged(uint8,uint8)"(
            oldStatus?: PromiseOrValue<BigNumberish> | null,
            newStatus?: PromiseOrValue<BigNumberish> | null
        ): DefaultStatusChangedEventFilter;
        DefaultStatusChanged(
            oldStatus?: PromiseOrValue<BigNumberish> | null,
            newStatus?: PromiseOrValue<BigNumberish> | null
        ): DefaultStatusChangedEventFilter;
    };

    estimateGas: {
        bal(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        chainlinkFeed(overrides?: CallOverrides): Promise<BigNumber>;

        delayUntilDefault(overrides?: CallOverrides): Promise<BigNumber>;

        erc20(overrides?: CallOverrides): Promise<BigNumber>;

        erc20Decimals(overrides?: CallOverrides): Promise<BigNumber>;

        fallbackPrice(overrides?: CallOverrides): Promise<BigNumber>;

        getClaimCalldata(overrides?: CallOverrides): Promise<BigNumber>;

        isCollateral(overrides?: CallOverrides): Promise<BigNumber>;

        maxTradeVolume(overrides?: CallOverrides): Promise<BigNumber>;

        oracleTimeout(overrides?: CallOverrides): Promise<BigNumber>;

        price(
            allowFallback: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        pricePerTarget(overrides?: CallOverrides): Promise<BigNumber>;

        refPerTok(overrides?: CallOverrides): Promise<BigNumber>;

        refresh(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        rewardERC20(overrides?: CallOverrides): Promise<BigNumber>;

        status(overrides?: CallOverrides): Promise<BigNumber>;

        strictPrice(overrides?: CallOverrides): Promise<BigNumber>;

        targetName(overrides?: CallOverrides): Promise<BigNumber>;

        targetPerRef(overrides?: CallOverrides): Promise<BigNumber>;

        whenDefault(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        bal(
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        chainlinkFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        delayUntilDefault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        erc20Decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        fallbackPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getClaimCalldata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        isCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        maxTradeVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        oracleTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        price(
            allowFallback: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        pricePerTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        refPerTok(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        refresh(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        rewardERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        strictPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        targetName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        targetPerRef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        whenDefault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
