/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export interface RsvManagerInterface extends utils.Interface {
    functions: {
        "setEmergency(bool)": FunctionFragment;
        "isFullyCollateralized()": FunctionFragment;
        "executeProposal(uint256)": FunctionFragment;
        "nominateNewOwner(address)": FunctionFragment;
        "toIssue(uint256)": FunctionFragment;
        "toRedeem(uint256)": FunctionFragment;
        "trustedVault()": FunctionFragment;
        "proposalsLength()": FunctionFragment;
        "seigniorage()": FunctionFragment;
        "renounceOwnership(string)": FunctionFragment;
        "nominatedOwner()": FunctionFragment;
        "operator()": FunctionFragment;
        "clearProposals()": FunctionFragment;
        "acceptProposal(uint256)": FunctionFragment;
        "setVault(address)": FunctionFragment;
        "delay()": FunctionFragment;
        "acceptOwnership()": FunctionFragment;
        "owner()": FunctionFragment;
        "proposeSwap(address[],uint256[],bool[])": FunctionFragment;
        "trustedBasket()": FunctionFragment;
        "setOperator(address)": FunctionFragment;
        "trustedRSV()": FunctionFragment;
        "trustedProposals(uint256)": FunctionFragment;
        "issuancePaused()": FunctionFragment;
        "setIssuancePaused(bool)": FunctionFragment;
        "proposeWeights(address[],uint256[])": FunctionFragment;
        "emergency()": FunctionFragment;
        "issue(uint256)": FunctionFragment;
        "setSeigniorage(uint256)": FunctionFragment;
        "redeem(uint256)": FunctionFragment;
        "cancelProposal(uint256)": FunctionFragment;
        "setDelay(uint256)": FunctionFragment;
        "trustedProposalFactory()": FunctionFragment;
        "VERSION()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "setEmergency"
            | "isFullyCollateralized"
            | "executeProposal"
            | "nominateNewOwner"
            | "toIssue"
            | "toRedeem"
            | "trustedVault"
            | "proposalsLength"
            | "seigniorage"
            | "renounceOwnership"
            | "nominatedOwner"
            | "operator"
            | "clearProposals"
            | "acceptProposal"
            | "setVault"
            | "delay"
            | "acceptOwnership"
            | "owner"
            | "proposeSwap"
            | "trustedBasket"
            | "setOperator"
            | "trustedRSV"
            | "trustedProposals"
            | "issuancePaused"
            | "setIssuancePaused"
            | "proposeWeights"
            | "emergency"
            | "issue"
            | "setSeigniorage"
            | "redeem"
            | "cancelProposal"
            | "setDelay"
            | "trustedProposalFactory"
            | "VERSION"
    ): FunctionFragment;

    encodeFunctionData(
        functionFragment: "setEmergency",
        values: [PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(functionFragment: "isFullyCollateralized", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "executeProposal",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "nominateNewOwner",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "toIssue",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "toRedeem",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "trustedVault", values?: undefined): string;
    encodeFunctionData(functionFragment: "proposalsLength", values?: undefined): string;
    encodeFunctionData(functionFragment: "seigniorage", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "renounceOwnership",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "nominatedOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "operator", values?: undefined): string;
    encodeFunctionData(functionFragment: "clearProposals", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "acceptProposal",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "setVault", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "delay", values?: undefined): string;
    encodeFunctionData(functionFragment: "acceptOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "proposeSwap",
        values: [
            PromiseOrValue<string>[],
            PromiseOrValue<BigNumberish>[],
            PromiseOrValue<boolean>[]
        ]
    ): string;
    encodeFunctionData(functionFragment: "trustedBasket", values?: undefined): string;
    encodeFunctionData(functionFragment: "setOperator", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "trustedRSV", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "trustedProposals",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "issuancePaused", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "setIssuancePaused",
        values: [PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(
        functionFragment: "proposeWeights",
        values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
    ): string;
    encodeFunctionData(functionFragment: "emergency", values?: undefined): string;
    encodeFunctionData(functionFragment: "issue", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "setSeigniorage",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "redeem", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(
        functionFragment: "cancelProposal",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "setDelay",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "trustedProposalFactory", values?: undefined): string;
    encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;

    decodeFunctionResult(functionFragment: "setEmergency", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isFullyCollateralized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nominateNewOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toIssue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toRedeem", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedVault", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposalsLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "seigniorage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nominatedOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clearProposals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposeSwap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedBasket", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedRSV", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedProposals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "issuancePaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setIssuancePaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposeWeights", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emergency", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSeigniorage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedProposalFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;

    events: {
        "ProposalsCleared()": EventFragment;
        "Issuance(address,uint256)": EventFragment;
        "Redemption(address,uint256)": EventFragment;
        "IssuancePausedChanged(bool,bool)": EventFragment;
        "EmergencyChanged(bool,bool)": EventFragment;
        "OperatorChanged(address,address)": EventFragment;
        "SeigniorageChanged(uint256,uint256)": EventFragment;
        "VaultChanged(address,address)": EventFragment;
        "DelayChanged(uint256,uint256)": EventFragment;
        "WeightsProposed(uint256,address,address[],uint256[])": EventFragment;
        "SwapProposed(uint256,address,address[],uint256[],bool[])": EventFragment;
        "ProposalAccepted(uint256,address)": EventFragment;
        "ProposalCanceled(uint256,address,address)": EventFragment;
        "ProposalExecuted(uint256,address,address,address,address)": EventFragment;
        "NewOwnerNominated(address,address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "ProposalsCleared"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Issuance"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "IssuancePausedChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EmergencyChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OperatorChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SeigniorageChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VaultChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DelayChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WeightsProposed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SwapProposed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProposalAccepted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewOwnerNominated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ProposalsClearedEventObject {}
export type ProposalsClearedEvent = TypedEvent<[], ProposalsClearedEventObject>;

export type ProposalsClearedEventFilter = TypedEventFilter<ProposalsClearedEvent>;

export interface IssuanceEventObject {
    user: string;
    amount: BigNumber;
}
export type IssuanceEvent = TypedEvent<[string, BigNumber], IssuanceEventObject>;

export type IssuanceEventFilter = TypedEventFilter<IssuanceEvent>;

export interface RedemptionEventObject {
    user: string;
    amount: BigNumber;
}
export type RedemptionEvent = TypedEvent<[string, BigNumber], RedemptionEventObject>;

export type RedemptionEventFilter = TypedEventFilter<RedemptionEvent>;

export interface IssuancePausedChangedEventObject {
    oldVal: boolean;
    newVal: boolean;
}
export type IssuancePausedChangedEvent = TypedEvent<
    [boolean, boolean],
    IssuancePausedChangedEventObject
>;

export type IssuancePausedChangedEventFilter = TypedEventFilter<IssuancePausedChangedEvent>;

export interface EmergencyChangedEventObject {
    oldVal: boolean;
    newVal: boolean;
}
export type EmergencyChangedEvent = TypedEvent<[boolean, boolean], EmergencyChangedEventObject>;

export type EmergencyChangedEventFilter = TypedEventFilter<EmergencyChangedEvent>;

export interface OperatorChangedEventObject {
    oldAccount: string;
    newAccount: string;
}
export type OperatorChangedEvent = TypedEvent<[string, string], OperatorChangedEventObject>;

export type OperatorChangedEventFilter = TypedEventFilter<OperatorChangedEvent>;

export interface SeigniorageChangedEventObject {
    oldVal: BigNumber;
    newVal: BigNumber;
}
export type SeigniorageChangedEvent = TypedEvent<
    [BigNumber, BigNumber],
    SeigniorageChangedEventObject
>;

export type SeigniorageChangedEventFilter = TypedEventFilter<SeigniorageChangedEvent>;

export interface VaultChangedEventObject {
    oldVaultAddr: string;
    newVaultAddr: string;
}
export type VaultChangedEvent = TypedEvent<[string, string], VaultChangedEventObject>;

export type VaultChangedEventFilter = TypedEventFilter<VaultChangedEvent>;

export interface DelayChangedEventObject {
    oldVal: BigNumber;
    newVal: BigNumber;
}
export type DelayChangedEvent = TypedEvent<[BigNumber, BigNumber], DelayChangedEventObject>;

export type DelayChangedEventFilter = TypedEventFilter<DelayChangedEvent>;

export interface WeightsProposedEventObject {
    id: BigNumber;
    proposer: string;
    tokens: string[];
    weights: BigNumber[];
}
export type WeightsProposedEvent = TypedEvent<
    [BigNumber, string, string[], BigNumber[]],
    WeightsProposedEventObject
>;

export type WeightsProposedEventFilter = TypedEventFilter<WeightsProposedEvent>;

export interface SwapProposedEventObject {
    id: BigNumber;
    proposer: string;
    tokens: string[];
    amounts: BigNumber[];
    toVault: boolean[];
}
export type SwapProposedEvent = TypedEvent<
    [BigNumber, string, string[], BigNumber[], boolean[]],
    SwapProposedEventObject
>;

export type SwapProposedEventFilter = TypedEventFilter<SwapProposedEvent>;

export interface ProposalAcceptedEventObject {
    id: BigNumber;
    proposer: string;
}
export type ProposalAcceptedEvent = TypedEvent<[BigNumber, string], ProposalAcceptedEventObject>;

export type ProposalAcceptedEventFilter = TypedEventFilter<ProposalAcceptedEvent>;

export interface ProposalCanceledEventObject {
    id: BigNumber;
    proposer: string;
    canceler: string;
}
export type ProposalCanceledEvent = TypedEvent<
    [BigNumber, string, string],
    ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter = TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalExecutedEventObject {
    id: BigNumber;
    proposer: string;
    executor: string;
    oldBasket: string;
    newBasket: string;
}
export type ProposalExecutedEvent = TypedEvent<
    [BigNumber, string, string, string, string],
    ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter = TypedEventFilter<ProposalExecutedEvent>;

export interface NewOwnerNominatedEventObject {
    previousOwner: string;
    nominee: string;
}
export type NewOwnerNominatedEvent = TypedEvent<[string, string], NewOwnerNominatedEventObject>;

export type NewOwnerNominatedEventFilter = TypedEventFilter<NewOwnerNominatedEvent>;

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RsvManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: RsvManagerInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        setEmergency(
            val: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        isFullyCollateralized(overrides?: CallOverrides): Promise<[boolean]>;

        executeProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        nominateNewOwner(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        toIssue(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber[]]>;

        toRedeem(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber[]]>;

        trustedVault(overrides?: CallOverrides): Promise<[string]>;

        proposalsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

        seigniorage(overrides?: CallOverrides): Promise<[BigNumber]>;

        renounceOwnership(
            declaration: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

        operator(overrides?: CallOverrides): Promise<[string]>;

        clearProposals(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        acceptProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setVault(
            newVaultAddress: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        delay(overrides?: CallOverrides): Promise<[BigNumber]>;

        acceptOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        proposeSwap(
            tokens: PromiseOrValue<string>[],
            amounts: PromiseOrValue<BigNumberish>[],
            toVault: PromiseOrValue<boolean>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        trustedBasket(overrides?: CallOverrides): Promise<[string]>;

        setOperator(
            _operator: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        trustedRSV(overrides?: CallOverrides): Promise<[string]>;

        trustedProposals(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        issuancePaused(overrides?: CallOverrides): Promise<[boolean]>;

        setIssuancePaused(
            val: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        proposeWeights(
            tokens: PromiseOrValue<string>[],
            weights: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        emergency(overrides?: CallOverrides): Promise<[boolean]>;

        issue(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setSeigniorage(
            _seigniorage: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        redeem(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        cancelProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setDelay(
            _delay: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        trustedProposalFactory(overrides?: CallOverrides): Promise<[string]>;

        VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;
    };

    setEmergency(
        val: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isFullyCollateralized(overrides?: CallOverrides): Promise<boolean>;

    executeProposal(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominateNewOwner(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toIssue(
        rsvAmount: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    toRedeem(
        rsvAmount: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    trustedVault(overrides?: CallOverrides): Promise<string>;

    proposalsLength(overrides?: CallOverrides): Promise<BigNumber>;

    seigniorage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
        declaration: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    clearProposals(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptProposal(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVault(
        newVaultAddress: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposeSwap(
        tokens: PromiseOrValue<string>[],
        amounts: PromiseOrValue<BigNumberish>[],
        toVault: PromiseOrValue<boolean>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedBasket(overrides?: CallOverrides): Promise<string>;

    setOperator(
        _operator: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedRSV(overrides?: CallOverrides): Promise<string>;

    trustedProposals(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>;

    issuancePaused(overrides?: CallOverrides): Promise<boolean>;

    setIssuancePaused(
        val: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeWeights(
        tokens: PromiseOrValue<string>[],
        weights: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergency(overrides?: CallOverrides): Promise<boolean>;

    issue(
        rsvAmount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSeigniorage(
        _seigniorage: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem(
        rsvAmount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelProposal(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelay(
        _delay: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedProposalFactory(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    callStatic: {
        setEmergency(val: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

        isFullyCollateralized(overrides?: CallOverrides): Promise<boolean>;

        executeProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        nominateNewOwner(
            newOwner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        toIssue(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber[]>;

        toRedeem(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber[]>;

        trustedVault(overrides?: CallOverrides): Promise<string>;

        proposalsLength(overrides?: CallOverrides): Promise<BigNumber>;

        seigniorage(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(
            declaration: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        nominatedOwner(overrides?: CallOverrides): Promise<string>;

        operator(overrides?: CallOverrides): Promise<string>;

        clearProposals(overrides?: CallOverrides): Promise<void>;

        acceptProposal(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        setVault(
            newVaultAddress: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        delay(overrides?: CallOverrides): Promise<BigNumber>;

        acceptOwnership(overrides?: CallOverrides): Promise<void>;

        owner(overrides?: CallOverrides): Promise<string>;

        proposeSwap(
            tokens: PromiseOrValue<string>[],
            amounts: PromiseOrValue<BigNumberish>[],
            toVault: PromiseOrValue<boolean>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        trustedBasket(overrides?: CallOverrides): Promise<string>;

        setOperator(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        trustedRSV(overrides?: CallOverrides): Promise<string>;

        trustedProposals(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>;

        issuancePaused(overrides?: CallOverrides): Promise<boolean>;

        setIssuancePaused(val: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

        proposeWeights(
            tokens: PromiseOrValue<string>[],
            weights: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        emergency(overrides?: CallOverrides): Promise<boolean>;

        issue(rsvAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        setSeigniorage(
            _seigniorage: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        redeem(rsvAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        cancelProposal(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        setDelay(_delay: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

        trustedProposalFactory(overrides?: CallOverrides): Promise<string>;

        VERSION(overrides?: CallOverrides): Promise<BigNumber>;
    };

    filters: {
        "ProposalsCleared()"(): ProposalsClearedEventFilter;
        ProposalsCleared(): ProposalsClearedEventFilter;

        "Issuance(address,uint256)"(
            user?: PromiseOrValue<string> | null,
            amount?: PromiseOrValue<BigNumberish> | null
        ): IssuanceEventFilter;
        Issuance(
            user?: PromiseOrValue<string> | null,
            amount?: PromiseOrValue<BigNumberish> | null
        ): IssuanceEventFilter;

        "Redemption(address,uint256)"(
            user?: PromiseOrValue<string> | null,
            amount?: PromiseOrValue<BigNumberish> | null
        ): RedemptionEventFilter;
        Redemption(
            user?: PromiseOrValue<string> | null,
            amount?: PromiseOrValue<BigNumberish> | null
        ): RedemptionEventFilter;

        "IssuancePausedChanged(bool,bool)"(
            oldVal?: PromiseOrValue<boolean> | null,
            newVal?: PromiseOrValue<boolean> | null
        ): IssuancePausedChangedEventFilter;
        IssuancePausedChanged(
            oldVal?: PromiseOrValue<boolean> | null,
            newVal?: PromiseOrValue<boolean> | null
        ): IssuancePausedChangedEventFilter;

        "EmergencyChanged(bool,bool)"(
            oldVal?: PromiseOrValue<boolean> | null,
            newVal?: PromiseOrValue<boolean> | null
        ): EmergencyChangedEventFilter;
        EmergencyChanged(
            oldVal?: PromiseOrValue<boolean> | null,
            newVal?: PromiseOrValue<boolean> | null
        ): EmergencyChangedEventFilter;

        "OperatorChanged(address,address)"(
            oldAccount?: PromiseOrValue<string> | null,
            newAccount?: PromiseOrValue<string> | null
        ): OperatorChangedEventFilter;
        OperatorChanged(
            oldAccount?: PromiseOrValue<string> | null,
            newAccount?: PromiseOrValue<string> | null
        ): OperatorChangedEventFilter;

        "SeigniorageChanged(uint256,uint256)"(
            oldVal?: null,
            newVal?: null
        ): SeigniorageChangedEventFilter;
        SeigniorageChanged(oldVal?: null, newVal?: null): SeigniorageChangedEventFilter;

        "VaultChanged(address,address)"(
            oldVaultAddr?: PromiseOrValue<string> | null,
            newVaultAddr?: PromiseOrValue<string> | null
        ): VaultChangedEventFilter;
        VaultChanged(
            oldVaultAddr?: PromiseOrValue<string> | null,
            newVaultAddr?: PromiseOrValue<string> | null
        ): VaultChangedEventFilter;

        "DelayChanged(uint256,uint256)"(oldVal?: null, newVal?: null): DelayChangedEventFilter;
        DelayChanged(oldVal?: null, newVal?: null): DelayChangedEventFilter;

        "WeightsProposed(uint256,address,address[],uint256[])"(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null,
            tokens?: null,
            weights?: null
        ): WeightsProposedEventFilter;
        WeightsProposed(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null,
            tokens?: null,
            weights?: null
        ): WeightsProposedEventFilter;

        "SwapProposed(uint256,address,address[],uint256[],bool[])"(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null,
            tokens?: null,
            amounts?: null,
            toVault?: null
        ): SwapProposedEventFilter;
        SwapProposed(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null,
            tokens?: null,
            amounts?: null,
            toVault?: null
        ): SwapProposedEventFilter;

        "ProposalAccepted(uint256,address)"(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null
        ): ProposalAcceptedEventFilter;
        ProposalAccepted(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null
        ): ProposalAcceptedEventFilter;

        "ProposalCanceled(uint256,address,address)"(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null,
            canceler?: PromiseOrValue<string> | null
        ): ProposalCanceledEventFilter;
        ProposalCanceled(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null,
            canceler?: PromiseOrValue<string> | null
        ): ProposalCanceledEventFilter;

        "ProposalExecuted(uint256,address,address,address,address)"(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null,
            executor?: PromiseOrValue<string> | null,
            oldBasket?: null,
            newBasket?: null
        ): ProposalExecutedEventFilter;
        ProposalExecuted(
            id?: PromiseOrValue<BigNumberish> | null,
            proposer?: PromiseOrValue<string> | null,
            executor?: PromiseOrValue<string> | null,
            oldBasket?: null,
            newBasket?: null
        ): ProposalExecutedEventFilter;

        "NewOwnerNominated(address,address)"(
            previousOwner?: PromiseOrValue<string> | null,
            nominee?: PromiseOrValue<string> | null
        ): NewOwnerNominatedEventFilter;
        NewOwnerNominated(
            previousOwner?: PromiseOrValue<string> | null,
            nominee?: PromiseOrValue<string> | null
        ): NewOwnerNominatedEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
    };

    estimateGas: {
        setEmergency(
            val: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        isFullyCollateralized(overrides?: CallOverrides): Promise<BigNumber>;

        executeProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        nominateNewOwner(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        toIssue(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        toRedeem(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        trustedVault(overrides?: CallOverrides): Promise<BigNumber>;

        proposalsLength(overrides?: CallOverrides): Promise<BigNumber>;

        seigniorage(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(
            declaration: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

        operator(overrides?: CallOverrides): Promise<BigNumber>;

        clearProposals(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        acceptProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setVault(
            newVaultAddress: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        delay(overrides?: CallOverrides): Promise<BigNumber>;

        acceptOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        proposeSwap(
            tokens: PromiseOrValue<string>[],
            amounts: PromiseOrValue<BigNumberish>[],
            toVault: PromiseOrValue<boolean>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        trustedBasket(overrides?: CallOverrides): Promise<BigNumber>;

        setOperator(
            _operator: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        trustedRSV(overrides?: CallOverrides): Promise<BigNumber>;

        trustedProposals(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        issuancePaused(overrides?: CallOverrides): Promise<BigNumber>;

        setIssuancePaused(
            val: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        proposeWeights(
            tokens: PromiseOrValue<string>[],
            weights: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        emergency(overrides?: CallOverrides): Promise<BigNumber>;

        issue(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setSeigniorage(
            _seigniorage: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        redeem(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        cancelProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setDelay(
            _delay: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        trustedProposalFactory(overrides?: CallOverrides): Promise<BigNumber>;

        VERSION(overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        setEmergency(
            val: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        isFullyCollateralized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        executeProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        nominateNewOwner(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        toIssue(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        toRedeem(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        trustedVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        proposalsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        seigniorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceOwnership(
            declaration: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        clearProposals(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        acceptProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setVault(
            newVaultAddress: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        acceptOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        proposeSwap(
            tokens: PromiseOrValue<string>[],
            amounts: PromiseOrValue<BigNumberish>[],
            toVault: PromiseOrValue<boolean>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        trustedBasket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        setOperator(
            _operator: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        trustedRSV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        trustedProposals(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        issuancePaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        setIssuancePaused(
            val: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        proposeWeights(
            tokens: PromiseOrValue<string>[],
            weights: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        emergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        issue(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setSeigniorage(
            _seigniorage: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        redeem(
            rsvAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        cancelProposal(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setDelay(
            _delay: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        trustedProposalFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
