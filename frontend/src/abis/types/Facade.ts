/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export declare namespace IFacadeP1 {
    export type PendingStruct = {
        index: PromiseOrValue<BigNumberish>;
        availableAt: PromiseOrValue<BigNumberish>;
        amount: PromiseOrValue<BigNumberish>;
    };

    export type PendingStructOutput = [BigNumber, BigNumber, BigNumber] & {
        index: BigNumber;
        availableAt: BigNumber;
        amount: BigNumber;
    };
}

export interface FacadeInterface extends utils.Interface {
    functions: {
        "backingOverview(address)": FunctionFragment;
        "basketBreakdown(address)": FunctionFragment;
        "basketTokens(address)": FunctionFragment;
        "claimRewards(address)": FunctionFragment;
        "currentAssets(address)": FunctionFragment;
        "issue(address,uint256)": FunctionFragment;
        "maxIssuable(address,address)": FunctionFragment;
        "pendingIssuances(address,address)": FunctionFragment;
        "pendingUnstakings(address,address)": FunctionFragment;
        "price(address)": FunctionFragment;
        "runAuctionsForAllTraders(address)": FunctionFragment;
        "stToken(address)": FunctionFragment;
        "totalAssetValue(address)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "backingOverview"
            | "basketBreakdown"
            | "basketTokens"
            | "claimRewards"
            | "currentAssets"
            | "issue"
            | "maxIssuable"
            | "pendingIssuances"
            | "pendingUnstakings"
            | "price"
            | "runAuctionsForAllTraders"
            | "stToken"
            | "totalAssetValue"
    ): FunctionFragment;

    encodeFunctionData(
        functionFragment: "backingOverview",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "basketBreakdown",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "basketTokens", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "claimRewards", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "currentAssets",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "issue",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "maxIssuable",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "pendingIssuances",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "pendingUnstakings",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "price", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "runAuctionsForAllTraders",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "stToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "totalAssetValue",
        values: [PromiseOrValue<string>]
    ): string;

    decodeFunctionResult(functionFragment: "backingOverview", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "basketBreakdown", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "basketTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxIssuable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingIssuances", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingUnstakings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "runAuctionsForAllTraders", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalAssetValue", data: BytesLike): Result;

    events: {};
}

export interface Facade extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: FacadeInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        backingOverview(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { backing: BigNumber; insurance: BigNumber }>;

        basketBreakdown(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        basketTokens(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[string[]] & { tokens: string[] }>;

        claimRewards(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        currentAssets(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        issue(
            rToken: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        maxIssuable(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        pendingIssuances(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [IFacadeP1.PendingStructOutput[]] & {
                issuances: IFacadeP1.PendingStructOutput[];
            }
        >;

        pendingUnstakings(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [IFacadeP1.PendingStructOutput[]] & {
                unstakings: IFacadeP1.PendingStructOutput[];
            }
        >;

        price(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

        runAuctionsForAllTraders(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        stToken(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[string] & { stTokenAddress: string }>;

        totalAssetValue(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };

    backingOverview(
        rToken: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { backing: BigNumber; insurance: BigNumber }>;

    basketBreakdown(
        rToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    basketTokens(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    claimRewards(
        rToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentAssets(
        rToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    issue(
        rToken: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxIssuable(
        rToken: PromiseOrValue<string>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingIssuances(
        rToken: PromiseOrValue<string>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<IFacadeP1.PendingStructOutput[]>;

    pendingUnstakings(
        rToken: PromiseOrValue<string>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<IFacadeP1.PendingStructOutput[]>;

    price(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    runAuctionsForAllTraders(
        rToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stToken(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    totalAssetValue(
        rToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        backingOverview(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { backing: BigNumber; insurance: BigNumber }>;

        basketBreakdown(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [string[], BigNumber[], string[]] & {
                erc20s: string[];
                uoaShares: BigNumber[];
                targets: string[];
            }
        >;

        basketTokens(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

        claimRewards(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        currentAssets(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }>;

        issue(
            rToken: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string[], BigNumber[]] & { tokens: string[]; deposits: BigNumber[] }>;

        maxIssuable(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        pendingIssuances(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<IFacadeP1.PendingStructOutput[]>;

        pendingUnstakings(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<IFacadeP1.PendingStructOutput[]>;

        price(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        runAuctionsForAllTraders(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        stToken(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

        totalAssetValue(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    };

    filters: {};

    estimateGas: {
        backingOverview(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        basketBreakdown(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        basketTokens(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        claimRewards(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        currentAssets(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        issue(
            rToken: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        maxIssuable(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        pendingIssuances(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        pendingUnstakings(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        price(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        runAuctionsForAllTraders(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        stToken(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        totalAssetValue(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        backingOverview(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        basketBreakdown(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        basketTokens(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        claimRewards(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        currentAssets(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        issue(
            rToken: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        maxIssuable(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        pendingIssuances(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        pendingUnstakings(
            rToken: PromiseOrValue<string>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        price(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        runAuctionsForAllTraders(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        stToken(
            rToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        totalAssetValue(
            rToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };
}
